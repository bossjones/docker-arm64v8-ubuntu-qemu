.PHONY: all
all: all-container

# Use the 0.0 tag for testing, it shouldn't clobber any release builds
TAG ?= 0.19.0
REGISTRY ?= quay.io/kubernetes-ingress-controller
DOCKER ?= docker
SED_I ?= sed -i
GOHOSTOS ?= $(shell go env GOHOSTOS)

# e2e settings
# Allow limiting the scope of the e2e tests. By default run everything
FOCUS ?= .*
# number of parallel test
E2E_NODES ?= 4
# slow test only if takes > 40s
SLOW_E2E_THRESHOLD ?= 40

NODE_IP ?= $(shell minikube ip)

ifeq ($(GOHOSTOS),darwin)
  SED_I=sed -i ''
endif

REPO_INFO=$(shell git config --get remote.origin.url)

ifndef GIT_COMMIT
  GIT_COMMIT := git-$(shell git rev-parse --short HEAD)
endif

PKG = k8s.io/ingress-nginx

ARCH ?= $(shell go env GOARCH)
GOARCH = ${ARCH}
DUMB_ARCH = ${ARCH}

GOBUILD_FLAGS :=

ALL_ARCH = amd64 arm arm64 ppc64le s390x arm64v8

QEMUVERSION = v2.12.0-1

BUSTED_ARGS =-v --pattern=_test

IMGNAME = nginx-ingress-controller
IMAGE = $(REGISTRY)/$(IMGNAME)
MULTI_ARCH_IMG = $(IMAGE)-$(ARCH)

# Set default base image dynamically for each arch
BASEIMAGE?=quay.io/kubernetes-ingress-controller/nginx-$(ARCH):0.63

ifeq ($(ARCH),arm)
	QEMUARCH=arm
	GOARCH=arm
	DUMB_ARCH=armhf
endif
ifeq ($(ARCH),arm64)
	QEMUARCH=aarch64
endif
ifeq ($(ARCH),ppc64le)
	QEMUARCH=ppc64le
	GOARCH=ppc64le
	DUMB_ARCH=ppc64el
endif
ifeq ($(ARCH),s390x)
	QEMUARCH=s390x
endif

TEMP_DIR := $(shell mktemp -d)

DEF_VARS:=ARCH=$(ARCH)           \
	TAG=$(TAG)               \
	PKG=$(PKG)               \
	GOARCH=$(GOARCH)         \
	GIT_COMMIT=$(GIT_COMMIT) \
	REPO_INFO=$(REPO_INFO)   \
	PWD=$(PWD)

DOCKERFILE := $(TEMP_DIR)/rootfs/Dockerfile

.PHONY: image-info
image-info:
	echo -n '{"image":"$(IMAGE)","tag":"$(TAG)"}'

.PHONY: sub-container-%
sub-container-%:
	$(MAKE) ARCH=$* build container

.PHONY: sub-push-%
sub-push-%:
	$(MAKE) ARCH=$* push

.PHONY: all-container
all-container: $(addprefix sub-container-,$(ALL_ARCH))

.PHONY: all-push
all-push: $(addprefix sub-push-,$(ALL_ARCH))

.PHONY: container
container: clean-container .container-$(ARCH)

.PHONY: .container-$(ARCH)
.container-$(ARCH):
	@echo "+ Copying artifact to temporary directory"
	mkdir -p $(TEMP_DIR)/rootfs
	cp bin/$(ARCH)/nginx-ingress-controller $(TEMP_DIR)/rootfs/nginx-ingress-controller

	@echo "+ Building container image $(MULTI_ARCH_IMG):$(TAG)"
	cp -RP ./* $(TEMP_DIR)
	$(SED_I) "s|BASEIMAGE|$(BASEIMAGE)|g" $(DOCKERFILE)
	$(SED_I) "s|QEMUARCH|$(QEMUARCH)|g" $(DOCKERFILE)
	$(SED_I) "s|DUMB_ARCH|$(DUMB_ARCH)|g" $(DOCKERFILE)

ifeq ($(ARCH),amd64)
	# When building "normally" for amd64, remove the whole line, it has no part in the amd64 image
	$(SED_I) "/CROSS_BUILD_/d" $(DOCKERFILE)
else
	# When cross-building, only the placeholder "CROSS_BUILD_" should be removed
	curl -sSL https://github.com/multiarch/qemu-user-static/releases/download/$(QEMUVERSION)/x86_64_qemu-$(QEMUARCH)-static.tar.gz | tar -xz -C $(TEMP_DIR)/rootfs
	$(SED_I) "s/CROSS_BUILD_//g" $(DOCKERFILE)
endif

	$(DOCKER) build --no-cache --pull -t $(MULTI_ARCH_IMG):$(TAG) $(TEMP_DIR)/rootfs

ifeq ($(ARCH), amd64)
	# This is for maintaining backward compatibility
	$(DOCKER) tag $(MULTI_ARCH_IMG):$(TAG) $(IMAGE):$(TAG)
endif


.PHONY: clean-container
clean-container:
	@echo "+ Deleting container image $(MULTI_ARCH_IMG):$(TAG)"
	$(DOCKER) rmi -f $(MULTI_ARCH_IMG):$(TAG) || true

.PHONY: register-qemu
register-qemu:
	# Register /usr/bin/qemu-ARCH-static as the handler for binaries in multiple platforms
	$(DOCKER) run --rm --privileged multiarch/qemu-user-static:register --reset

.PHONY: push
push: .push-$(ARCH)

.PHONY: .push-$(ARCH)
.push-$(ARCH):
	$(DOCKER) push $(MULTI_ARCH_IMG):$(TAG)
ifeq ($(ARCH), amd64)
	$(DOCKER) push $(IMAGE):$(TAG)
endif

.PHONY: build
build:
	@echo "+ Building bin/$(ARCH)/nginx-ingress-controller"
	@$(DEF_VARS) \
	GOBUILD_FLAGS="$(GOBUILD_FLAGS)" \
	build/go-in-docker.sh build/build.sh

.PHONY: clean
clean:
	rm -rf bin/ .gocache/ .env
